#!/usr/bin/env python

import asyncore
import socket as skt
import sys
import os
from urlparse import urlparse

class HTTPdownloader():

    def __init__(self, url):

        self.host, self.path, self.port = self.parse_url(url)

        # Create a TCP socket to host at the right port
        self.clientSocket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)
        self.request_str = self.make_request("GET", self.path, {"HOST": self.host, "Connection": "close"})

        # Variable
        self.collectHeader2 = ""
        self.collectHeader = ""
        self.numberOfDataReceived = 0
        self.servName = sys.argv[-1]
        self.filename = sys.argv[-2]
        self.startResume = 0
        self.resumable = False
        self.infoName = "information.txt"

        self.canResume()

    def resume_request(self,host, path,range):
        NL = "\r\n"
        header = ("GET {p} HTTP/1.1" + NL + "Host: {h}" +NL+self.Range+NL+"Connection: close"+NL+NL).format(p=self.path, h=self.host)
        return header

    def make_request(self, req_type, what, details, ver="1.1"):
        #""" Compose an HTTP request """
        NL = "\r\n"
        req_line = "{verb} {w} HTTP/{v}".format(verb=req_type, w=what, v=ver)
        details = ["{name}: {v}".format(name=n,v=v) for (n,v) in details.iteritems()]
        detail_lines = NL.join(details)
        full_request = "".join([req_line, NL, detail_lines, NL, NL])
        return full_request

    def parse_url(self, url, DEFAULT_PORT=80):
        #""" Parse a given url into host, path, and port. Use DEFAULT_PORT (80) if unspecified."""
        parsed_url = urlparse(url)
        host, path, port = (parsed_url.hostname, parsed_url.path, parsed_url.port)
        if not port:
            port = DEFAULT_PORT
        return (host, path, port)

    def canResume(self):
        if os.path.exists(self.filename) and os.path.exists("information.txt"):
            self.resumable = True
            self.openSocketForResume()
        else:
            self.openSocket()
            self.findHeader()

    def openSocket(self):
        self.clientSocket.connect((self.host, self.port))
        self.clientSocket.send(self.request_str)
        print "Connection is ready...."

    def findHeader(self):

        data_received = self.clientSocket.recv(1024)
        self.f = open(self.filename, 'wb')

        while data_received:
            self.collectHeader += data_received
            if "\r\n\r\n" in self.collectHeader:
                self.header, self.remaining_data = self.collectHeader.split("\r\n\r\n")
                self.f.write(self.remaining_data)
                self.numberOfDataReceived += len(self.remaining_data)
                self.keeper = self.findInfoToCompare(self.header)
                self.findContentLength()
                break    

    def findInfoToCompare(self,header):
        splitHeader = self.header.split()

        if "Last-Modified:" in splitHeader:
            indexOfLastModi = splitHeader.index("Last-Modified:")+1

        lastModi =  "".join(splitHeader[indexOfLastModi:indexOfLastModi+6])

        if "ETag:" in splitHeader:
            indexOfEtag = splitHeader.index("ETag:") + 1
            etag = splitHeader[indexOfEtag]

        if "Content-Length:" in splitHeader:
            indexOfContentlength = splitHeader.index("Content-Length:") + 1
            if self.resumable: content = int(splitHeader[indexOfContentlength]) + int(self.clControl)
            else: content = splitHeader[indexOfContentlength]

        return self.filename+"\r\n"+lastModi+"\r\n"+etag+"\r\n"+str(content)

    def findContentLength(self):
        splitHeader = self.header.split()
        if "Content-Length:" in splitHeader:
            indexOfContentlength = splitHeader.index("Content-Length:") + 1
            self.length = splitHeader[indexOfContentlength]
            self.writeInfo()
            self.writeFileWithContentLength(self.length)
        else:
            self.writeFileWithoutContent()
            closeSocket()

    def writeFileWithContentLength(self, contentLength):
        self.numberOfDataReceived = len(self.remaining_data)
        self.cwd = os.path.abspath('.') + '/'

        try:
            while self.numberOfDataReceived < int(self.length):
                
                data_received2 = self.clientSocket.recv(8192)
            
                self.f.write(data_received2)
                self.numberOfDataReceived += len(data_received2)
                   
            try:
                os.remove(self.cwd+self.infoName)
                print "DONE LOADING"
            except OSError:
                pass

        except KeyboardInterrupt,IOError:
            print "Connection error..."
            self.info = open('information.txt', 'ab')
            self.info.write("\r\n"+str(self.numberOfDataReceived))

            # self.info.write(str(self.numberOfDataReceived))
            self.info.close()
            

        finally: 
            self.closeSocket()

    def writeFileWithoutContentLength(self):
        data_received3 = self.clientSocket.recv(8192)
        while data_received3:
            self.f.write(data_received3)
            data_received3 = self.clientSocket.recv(8192)
        self.closeSocket()   
        
    def writeInfo(self):
        self.info = open(self.infoName, 'wb')
        self.info.write(str(self.keeper))
        self.info.close()

#######" RESUME PART "#######

    def getInfo(self):
        self.needYou = open('information.txt', 'r')
        self.fileName, self.dateModified, self.numberEtag, self.cl, self.resuming_range = self.needYou.read().split("\r\n")

    def openSocketForResume(self):
        self.getInfo()
        self.Range = "Range: bytes="+str(int(self.resuming_range))+"-"+self.cl
        self.request_resume = self.resume_request(self.host, self.path, self.Range)

        self.clientSocket.connect((self.host, self.port))
        self.clientSocket.send(self.request_resume)

        print "Connected again"

        self.findHeaderForResume()

    def findHeaderForResume(self):
        data_received = self.clientSocket.recv(8192)
        self.f = open(self.filename, 'ab')

        while data_received:
            self.collectHeader2 += data_received

            if "\r\n\r\n" in self.collectHeader2:
                self.header, self.remaining_data = self.collectHeader2.split("\r\n\r\n")
                self.f.write(self.remaining_data)
                break

        self.clControl =  int(self.cl)-int(self.findContentLengthForResume())
        self.filename2, self.dateModified2, self.numberEtag2, self.cl2 = self.findInfoToCompare(self.header).split("\r\n")
        self.compareData()

    def compareData(self):
        if (self.filename == self.filename2 and self.dateModified ==  self.dateModified2 and self.numberEtag == self.numberEtag2 and 
            self.cl == self.cl2): self.finishFile()
        else: 
            print "ERROR...We will download the file again"
            self.openSocket()
            self.findHeader()

    def findContentLengthForResume(self):
        splitHeader = self.header.split()
        if "Content-Length:" in splitHeader:
            indexOfContentlength = splitHeader.index("Content-Length:") + 1
            return splitHeader[indexOfContentlength]

    def finishFile(self):

        print "Resuming in progress..."
        self.f = open(self.filename, 'ab')
        self.cwd = os.path.abspath('.') + '/'
        data_receivedF = self.clientSocket.recv(8192)

        try:
            while data_receivedF:
                self.f.write(data_receivedF)
                if not data_receivedF: break
                data_receivedF = self.clientSocket.recv(8192)

            try:
                os.remove(self.cwd+self.infoName)
            except OSError:
                pass
        except KeyboardInterrupt:    
            pass
        finally: 
            self.closeSocket()
            print "DONE LOADING"

    def closeSocket(self):
        self.f.close()
        self.clientSocket.close()

servName = sys.argv[-1]
if __name__ == '__main__':
    clients = [HTTPdownloader(servName)]
    asyncore.loop()