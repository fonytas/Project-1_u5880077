#!/usr/bin/env python


import asyncore
import socket as skt
import sys
import os
from urlparse import urlparse
import threading

class HTTPdownloader():

    def __init__(self, url):

        self.servName = sys.argv[-1]

        self.host, self.path, self.port = self.parse_url(url)
        self.clientSocket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)
        self.request_str = self.make_request("GET", self.path, {"HOST": self.host, "Connection": "close"})

        self.infoName = "information.txt"
        self.doThread = False
        self.resumable = False
    
        self.findNumberOfThread()

        self.whatToDo()

    def whatToDo(self):
        if self.doThread == True:
            self.f = open(self.fileName, 'wb')
            self.openSocket()
            self.findRange()
            self.closeSocket()
            self.tellRange()
            self.f.close()
            self.closeSocket()
            print "DONE LOADING"
        else: ### do normal task ###

            self.canResume()
            if self.resumable == False:
                self.f = open(self.fileName, 'wb')
                self.openSocket()
                self.writingFile()
            else: pass

    def canResume(self):
        if os.path.exists(self.fileName) and os.path.exists(self.infoName):
            self.resumable = True
            self.openFile()
            self.openSocketForResume()
            self.compareData()
        else: pass


    def openFile(self): 
        openInfo = open(self.infoName, 'r')
        self.fileName2, self.dateModified, self.numberEtag, self.cl, self.resuming_range = openInfo.read().split("\r\n")

    def openSocketForResume(self):

        self.Range = "Range: bytes="+str(int(self.resuming_range))+"-"+self.cl
        self.request_resume = self.resume_request(self.host, self.path, self.Range)

        self.clientSocket.connect((self.host, self.port))
        self.clientSocket.send(self.request_resume)

        print "Connected again"

    def writeFileForResume(self):
        print "Resumming in progress..."
        self.f = open(self.fileName, 'ab')
        self.cwd = os.path.abspath('.') + '/'

        data_received = self.clientSocket.recv(8192)

        try: 
            while data_received:
                self.f.write(data_received)
                if not data_received: break
                data_received = self.clientSocket.recv(8192)

                try:
                    os.remove(self.cwd+self.infoName)
                except OSError:
                    pass
        except KeyboardInterrupt: pass
        finally:
            self.closeSocket()
            print "DONW LOADING"


    def compareData(self):
        head = self.getInfo(self.findHeader())

        if (self.fileName2 == self.fileName and self.dateModified == head["Last-Modified"] and self.numberEtag == head["ETag"]):
            self.writeFileForResume()
        else: 
            print "ERROR..... The file that you are looking for does not exist"


    def writingFile(self):
        head = self.getInfo(self.findHeader())
        if "Content-Length" in head.keys():

            information = open(self.infoName, 'wb')
            info = self.fileName+"\r\n"+head["Last-Modified"]+"\r\n"+head["ETag"]+"\r\n"+head["Content-Length"]
            information.write(info)

            numberOfDataReceived = 0
            self.cwd = os.path.abspath('.') + '/'

            try: 
                while numberOfDataReceived < int(head["Content-Length"]):
                    data_received = self.clientSocket.recv(8192)
                    self.f.write(data_received)
                    numberOfDataReceived += len(data_received)
                try: 
                    os.remove(self.cwd+self.infoName)
                    print "DONE LOADING"
                except OSError:
                    pass
            except KeyboardInterrupt, IOError:
                print "Connection error...We will re-download again"
                information = open(self.infoName, 'ab')
                information.write("\r\n"+str(numberOfDataReceived))
                information.close()

        else: 
            data_received = self.clientSocket.recv(8192)
            while data_received:
                self.f.write(data_received)
                data_received = self.clientSocket.recv(8192)
            self.closeSocket()


    def findNumberOfThread(self):
        number = list(range(100))

        if sys.argv[-2] in str(number):
            self.numberOfThread = int(sys.argv[-2])
            self.fileName = sys.argv[-4]
            self.doThread = True
        elif sys.argv[-2] == "-c":
            self.fileName = sys.argv[-3]
            self.numberOfThread = 5
            self.doThread = True

        else:
            self.fileName = sys.argv[-2] #### DO NORMAL TASK

    def findHeader(self):
        collectHeader = ""
        data_receive = self.clientSocket.recv(1)

        while data_receive:
            collectHeader += data_receive
            if "\r\n\r\n" in collectHeader:
                header, remain = collectHeader.split("\r\n\r\n")
                break
            data_receive = self.clientSocket.recv(1)

        return header

    def getInfo(self, header):
        data = header.replace("\n ", " ").splitlines()
        headers = {}
        for line in data:
            split_here = line.find(":")
            headers[line[:split_here]] = line[split_here+2:]
        return headers


    def findRange(self):
        gg = self.findHeader()
        allInfo = self.getInfo(gg)

        # print "<<>infooooo>>>", allInfo

        self.totalCL = int(allInfo["Content-Length"])
        # print "TOTAL: ", self.totalCL

        self.byteInThread = self.totalCL//self.numberOfThread
        # print "self.numberOfThread: ", self.numberOfThread
        # print "byte in each thread: ", self.byteInThread

    def tellRange(self):
        count = 1
        start = 0
        self.endDownload = 0
        begin = 0
        self.lstWhereToBegin = []
        self.lstEndDownload = []

        while count <= self.numberOfThread:
            self.whereToBegin = start
            start += self.byteInThread
            if count == self.numberOfThread: 
                self.endDownload = self.totalCL-1
            else: self.endDownload = start-1
            count += 1

            self.lstWhereToBegin.append(self.whereToBegin)
            self.lstEndDownload.append(self.endDownload)

            self.threadDownload()

    def threadDownload(self):

        Thread = []
        for i,j,k in zip(self.lstWhereToBegin, self.lstEndDownload, range(1, self.numberOfThread+1)):

            t = threading.Thread(target=self.openSocketForThread, args=(i,j,k))
            Thread.append(t)
            # print("threading.Thread(target=self.openSocketForThread, argvs=({a},{b},{c}").format(a=i,b=j,c=k)
            t.start()
            z = threading.activeCount()
            # print "z>>>>>>>>>",z

        for i in Thread:
            i.join()

        self.writeFile()

    def openSocketForThread(self,i,j,k):

        self.sendRange = "Range: bytes="+str(int(i))+"-"+str(j)
        self.clientSocket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)
        self.request_resume = self.resume_request(self.host, self.path,self.sendRange)
        self.clientSocket.connect((self.host, self.port))
        try:
            self.clientSocket.send(self.request_resume)
        except Exception, e:
            pass

    def writeFile(self):

        self.getInfo(self.findHeader())
        data_receive = self.clientSocket.recv(8192)
        while data_receive:
            self.f.write(data_receive)
            data_receive = self.clientSocket.recv(8192)

    def resume_request(self, host, path, rangebyte):
        NL = "\r\n"
        header = ("GET {p} HTTP/1.1" + NL + "Host: {h}" +NL+rangebyte+NL+"Connection: close"+NL+NL).format(p=self.path, h=self.host)
        return header


    def openSocket(self):
        self.clientSocket.connect((self.host, self.port))
        self.clientSocket.send(self.request_str)
        print "Connection is ready...."

    def closeSocket(self):
        self.clientSocket.close()

    def parse_url(self, url, DEFAULT_PORT=80):
        #""" Parse a given url into host, path, and port. Use DEFAULT_PORT (80) if unspecified."""
        parsed_url = urlparse(url)
        host, path, port = (parsed_url.hostname, parsed_url.path, parsed_url.port)
        if not port:
            port = DEFAULT_PORT
        return (host, path, port)

    def make_request(self, req_type, what, details, ver="1.1"):
        #""" Compose an HTTP request """
        NL = "\r\n"
        req_line = "{verb} {w} HTTP/{v}".format(verb=req_type, w=what, v=ver)
        details = ["{name}: {v}".format(name=n,v=v) for (n,v) in details.iteritems()]
        detail_lines = NL.join(details)
        full_request = "".join([req_line, NL, detail_lines, NL, NL])
        return full_request


servName = sys.argv[-1]
if __name__ == '__main__':
    clients = [HTTPdownloader(servName)]
    asyncore.loop()


