#!/usr/bin/env python


#keep alive

import socket as skt
from urlparse import urlparse
import threading
import sys
import asyncore



class WebService():

    def __init__(self, url):

        self.servName = sys.argv[-1]
        self.host, self.path, self.port = self.parse_url(url)
        self.clientSocket = skt.socket(skt.AF_INET, skt.SOCK_STREAM)
        self.request =  self.make_request(self.host,self.path)
 
        self.openConnection()


    def openConnection(self):
        self.clientSocket.connect((self.host, self.port))
        self.clientSocket.send(self.request)
        print "Connection is ready..."

    def make_request(self, host, path):
        NL = "\r\n"
        header = ("GET {p} HTTP/1.1" + NL + "Host: {h}" +"Connection: keep-alive"+NL+NL).format(p=self.path, h=self.host)
        return header
    def parse_url(self, url, DEFAULT_PORT=80):
        #""" Parse a given url into host, path, and port. Use DEFAULT_PORT (80) if unspecified."""
        parsed_url = urlparse(url)
        host, path, port = (parsed_url.hostname, parsed_url.path, parsed_url.port)
        if not port:
            port = DEFAULT_PORT
        return (host, path, port)





servName = sys.argv[-1]
if __name__ == '__main__':
    clients = [WebService(servName)]
    asyncore.loop()
